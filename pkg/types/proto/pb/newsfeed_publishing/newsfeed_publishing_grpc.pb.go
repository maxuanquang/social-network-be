// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: newsfeed_publishing.proto

package newsfeed_publishing

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NewsfeedPublishing_PublishPost_FullMethodName = "/newsfeed_publishing.NewsfeedPublishing/PublishPost"
)

// NewsfeedPublishingClient is the client API for NewsfeedPublishing service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NewsfeedPublishingClient interface {
	PublishPost(ctx context.Context, in *PublishPostRequest, opts ...grpc.CallOption) (*PublishPostResponse, error)
}

type newsfeedPublishingClient struct {
	cc grpc.ClientConnInterface
}

func NewNewsfeedPublishingClient(cc grpc.ClientConnInterface) NewsfeedPublishingClient {
	return &newsfeedPublishingClient{cc}
}

func (c *newsfeedPublishingClient) PublishPost(ctx context.Context, in *PublishPostRequest, opts ...grpc.CallOption) (*PublishPostResponse, error) {
	out := new(PublishPostResponse)
	err := c.cc.Invoke(ctx, NewsfeedPublishing_PublishPost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NewsfeedPublishingServer is the server API for NewsfeedPublishing service.
// All implementations must embed UnimplementedNewsfeedPublishingServer
// for forward compatibility
type NewsfeedPublishingServer interface {
	PublishPost(context.Context, *PublishPostRequest) (*PublishPostResponse, error)
	mustEmbedUnimplementedNewsfeedPublishingServer()
}

// UnimplementedNewsfeedPublishingServer must be embedded to have forward compatible implementations.
type UnimplementedNewsfeedPublishingServer struct {
}

func (UnimplementedNewsfeedPublishingServer) PublishPost(context.Context, *PublishPostRequest) (*PublishPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishPost not implemented")
}
func (UnimplementedNewsfeedPublishingServer) mustEmbedUnimplementedNewsfeedPublishingServer() {}

// UnsafeNewsfeedPublishingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NewsfeedPublishingServer will
// result in compilation errors.
type UnsafeNewsfeedPublishingServer interface {
	mustEmbedUnimplementedNewsfeedPublishingServer()
}

func RegisterNewsfeedPublishingServer(s grpc.ServiceRegistrar, srv NewsfeedPublishingServer) {
	s.RegisterService(&NewsfeedPublishing_ServiceDesc, srv)
}

func _NewsfeedPublishing_PublishPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsfeedPublishingServer).PublishPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NewsfeedPublishing_PublishPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsfeedPublishingServer).PublishPost(ctx, req.(*PublishPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NewsfeedPublishing_ServiceDesc is the grpc.ServiceDesc for NewsfeedPublishing service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NewsfeedPublishing_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "newsfeed_publishing.NewsfeedPublishing",
	HandlerType: (*NewsfeedPublishingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishPost",
			Handler:    _NewsfeedPublishing_PublishPost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "newsfeed_publishing.proto",
}
