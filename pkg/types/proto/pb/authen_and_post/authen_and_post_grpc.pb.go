// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: authen_and_post.proto

package authen_and_post

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AuthenticateAndPost_CheckUserAuthentication_FullMethodName = "/authen_and_post.AuthenticateAndPost/CheckUserAuthentication"
	AuthenticateAndPost_CreateUser_FullMethodName              = "/authen_and_post.AuthenticateAndPost/CreateUser"
	AuthenticateAndPost_EditUser_FullMethodName                = "/authen_and_post.AuthenticateAndPost/EditUser"
	AuthenticateAndPost_GetUserDetailInfo_FullMethodName       = "/authen_and_post.AuthenticateAndPost/GetUserDetailInfo"
	AuthenticateAndPost_GetUserFollower_FullMethodName         = "/authen_and_post.AuthenticateAndPost/GetUserFollower"
	AuthenticateAndPost_GetUserFollowing_FullMethodName        = "/authen_and_post.AuthenticateAndPost/GetUserFollowing"
	AuthenticateAndPost_FollowUser_FullMethodName              = "/authen_and_post.AuthenticateAndPost/FollowUser"
	AuthenticateAndPost_UnfollowUser_FullMethodName            = "/authen_and_post.AuthenticateAndPost/UnfollowUser"
	AuthenticateAndPost_GetUserPosts_FullMethodName            = "/authen_and_post.AuthenticateAndPost/GetUserPosts"
	AuthenticateAndPost_CreatePost_FullMethodName              = "/authen_and_post.AuthenticateAndPost/CreatePost"
	AuthenticateAndPost_GetPostDetailInfo_FullMethodName       = "/authen_and_post.AuthenticateAndPost/GetPostDetailInfo"
	AuthenticateAndPost_EditPost_FullMethodName                = "/authen_and_post.AuthenticateAndPost/EditPost"
	AuthenticateAndPost_DeletePost_FullMethodName              = "/authen_and_post.AuthenticateAndPost/DeletePost"
	AuthenticateAndPost_CommentPost_FullMethodName             = "/authen_and_post.AuthenticateAndPost/CommentPost"
	AuthenticateAndPost_LikePost_FullMethodName                = "/authen_and_post.AuthenticateAndPost/LikePost"
	AuthenticateAndPost_GetS3PresignedUrl_FullMethodName       = "/authen_and_post.AuthenticateAndPost/GetS3PresignedUrl"
)

// AuthenticateAndPostClient is the client API for AuthenticateAndPost service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthenticateAndPostClient interface {
	// Group: users
	CheckUserAuthentication(ctx context.Context, in *CheckUserAuthenticationRequest, opts ...grpc.CallOption) (*CheckUserAuthenticationResponse, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	EditUser(ctx context.Context, in *EditUserRequest, opts ...grpc.CallOption) (*EditUserResponse, error)
	GetUserDetailInfo(ctx context.Context, in *GetUserDetailInfoRequest, opts ...grpc.CallOption) (*GetUserDetailInfoResponse, error)
	// Group: friends
	GetUserFollower(ctx context.Context, in *GetUserFollowerRequest, opts ...grpc.CallOption) (*GetUserFollowerResponse, error)
	GetUserFollowing(ctx context.Context, in *GetUserFollowingRequest, opts ...grpc.CallOption) (*GetUserFollowingResponse, error)
	FollowUser(ctx context.Context, in *FollowUserRequest, opts ...grpc.CallOption) (*FollowUserResponse, error)
	UnfollowUser(ctx context.Context, in *UnfollowUserRequest, opts ...grpc.CallOption) (*UnfollowUserResponse, error)
	GetUserPosts(ctx context.Context, in *GetUserPostsRequest, opts ...grpc.CallOption) (*GetUserPostsResponse, error)
	// Group: posts
	CreatePost(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*CreatePostResponse, error)
	GetPostDetailInfo(ctx context.Context, in *GetPostDetailInfoRequest, opts ...grpc.CallOption) (*GetPostDetailInfoResponse, error)
	EditPost(ctx context.Context, in *EditPostRequest, opts ...grpc.CallOption) (*EditPostResponse, error)
	DeletePost(ctx context.Context, in *DeletePostRequest, opts ...grpc.CallOption) (*DeletePostResponse, error)
	CommentPost(ctx context.Context, in *CommentPostRequest, opts ...grpc.CallOption) (*CommentPostResponse, error)
	LikePost(ctx context.Context, in *LikePostRequest, opts ...grpc.CallOption) (*LikePostResponse, error)
	GetS3PresignedUrl(ctx context.Context, in *GetS3PresignedUrlRequest, opts ...grpc.CallOption) (*GetS3PresignedUrlResponse, error)
}

type authenticateAndPostClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthenticateAndPostClient(cc grpc.ClientConnInterface) AuthenticateAndPostClient {
	return &authenticateAndPostClient{cc}
}

func (c *authenticateAndPostClient) CheckUserAuthentication(ctx context.Context, in *CheckUserAuthenticationRequest, opts ...grpc.CallOption) (*CheckUserAuthenticationResponse, error) {
	out := new(CheckUserAuthenticationResponse)
	err := c.cc.Invoke(ctx, AuthenticateAndPost_CheckUserAuthentication_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticateAndPostClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, AuthenticateAndPost_CreateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticateAndPostClient) EditUser(ctx context.Context, in *EditUserRequest, opts ...grpc.CallOption) (*EditUserResponse, error) {
	out := new(EditUserResponse)
	err := c.cc.Invoke(ctx, AuthenticateAndPost_EditUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticateAndPostClient) GetUserDetailInfo(ctx context.Context, in *GetUserDetailInfoRequest, opts ...grpc.CallOption) (*GetUserDetailInfoResponse, error) {
	out := new(GetUserDetailInfoResponse)
	err := c.cc.Invoke(ctx, AuthenticateAndPost_GetUserDetailInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticateAndPostClient) GetUserFollower(ctx context.Context, in *GetUserFollowerRequest, opts ...grpc.CallOption) (*GetUserFollowerResponse, error) {
	out := new(GetUserFollowerResponse)
	err := c.cc.Invoke(ctx, AuthenticateAndPost_GetUserFollower_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticateAndPostClient) GetUserFollowing(ctx context.Context, in *GetUserFollowingRequest, opts ...grpc.CallOption) (*GetUserFollowingResponse, error) {
	out := new(GetUserFollowingResponse)
	err := c.cc.Invoke(ctx, AuthenticateAndPost_GetUserFollowing_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticateAndPostClient) FollowUser(ctx context.Context, in *FollowUserRequest, opts ...grpc.CallOption) (*FollowUserResponse, error) {
	out := new(FollowUserResponse)
	err := c.cc.Invoke(ctx, AuthenticateAndPost_FollowUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticateAndPostClient) UnfollowUser(ctx context.Context, in *UnfollowUserRequest, opts ...grpc.CallOption) (*UnfollowUserResponse, error) {
	out := new(UnfollowUserResponse)
	err := c.cc.Invoke(ctx, AuthenticateAndPost_UnfollowUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticateAndPostClient) GetUserPosts(ctx context.Context, in *GetUserPostsRequest, opts ...grpc.CallOption) (*GetUserPostsResponse, error) {
	out := new(GetUserPostsResponse)
	err := c.cc.Invoke(ctx, AuthenticateAndPost_GetUserPosts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticateAndPostClient) CreatePost(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*CreatePostResponse, error) {
	out := new(CreatePostResponse)
	err := c.cc.Invoke(ctx, AuthenticateAndPost_CreatePost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticateAndPostClient) GetPostDetailInfo(ctx context.Context, in *GetPostDetailInfoRequest, opts ...grpc.CallOption) (*GetPostDetailInfoResponse, error) {
	out := new(GetPostDetailInfoResponse)
	err := c.cc.Invoke(ctx, AuthenticateAndPost_GetPostDetailInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticateAndPostClient) EditPost(ctx context.Context, in *EditPostRequest, opts ...grpc.CallOption) (*EditPostResponse, error) {
	out := new(EditPostResponse)
	err := c.cc.Invoke(ctx, AuthenticateAndPost_EditPost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticateAndPostClient) DeletePost(ctx context.Context, in *DeletePostRequest, opts ...grpc.CallOption) (*DeletePostResponse, error) {
	out := new(DeletePostResponse)
	err := c.cc.Invoke(ctx, AuthenticateAndPost_DeletePost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticateAndPostClient) CommentPost(ctx context.Context, in *CommentPostRequest, opts ...grpc.CallOption) (*CommentPostResponse, error) {
	out := new(CommentPostResponse)
	err := c.cc.Invoke(ctx, AuthenticateAndPost_CommentPost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticateAndPostClient) LikePost(ctx context.Context, in *LikePostRequest, opts ...grpc.CallOption) (*LikePostResponse, error) {
	out := new(LikePostResponse)
	err := c.cc.Invoke(ctx, AuthenticateAndPost_LikePost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticateAndPostClient) GetS3PresignedUrl(ctx context.Context, in *GetS3PresignedUrlRequest, opts ...grpc.CallOption) (*GetS3PresignedUrlResponse, error) {
	out := new(GetS3PresignedUrlResponse)
	err := c.cc.Invoke(ctx, AuthenticateAndPost_GetS3PresignedUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthenticateAndPostServer is the server API for AuthenticateAndPost service.
// All implementations must embed UnimplementedAuthenticateAndPostServer
// for forward compatibility
type AuthenticateAndPostServer interface {
	// Group: users
	CheckUserAuthentication(context.Context, *CheckUserAuthenticationRequest) (*CheckUserAuthenticationResponse, error)
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	EditUser(context.Context, *EditUserRequest) (*EditUserResponse, error)
	GetUserDetailInfo(context.Context, *GetUserDetailInfoRequest) (*GetUserDetailInfoResponse, error)
	// Group: friends
	GetUserFollower(context.Context, *GetUserFollowerRequest) (*GetUserFollowerResponse, error)
	GetUserFollowing(context.Context, *GetUserFollowingRequest) (*GetUserFollowingResponse, error)
	FollowUser(context.Context, *FollowUserRequest) (*FollowUserResponse, error)
	UnfollowUser(context.Context, *UnfollowUserRequest) (*UnfollowUserResponse, error)
	GetUserPosts(context.Context, *GetUserPostsRequest) (*GetUserPostsResponse, error)
	// Group: posts
	CreatePost(context.Context, *CreatePostRequest) (*CreatePostResponse, error)
	GetPostDetailInfo(context.Context, *GetPostDetailInfoRequest) (*GetPostDetailInfoResponse, error)
	EditPost(context.Context, *EditPostRequest) (*EditPostResponse, error)
	DeletePost(context.Context, *DeletePostRequest) (*DeletePostResponse, error)
	CommentPost(context.Context, *CommentPostRequest) (*CommentPostResponse, error)
	LikePost(context.Context, *LikePostRequest) (*LikePostResponse, error)
	GetS3PresignedUrl(context.Context, *GetS3PresignedUrlRequest) (*GetS3PresignedUrlResponse, error)
	mustEmbedUnimplementedAuthenticateAndPostServer()
}

// UnimplementedAuthenticateAndPostServer must be embedded to have forward compatible implementations.
type UnimplementedAuthenticateAndPostServer struct {
}

func (UnimplementedAuthenticateAndPostServer) CheckUserAuthentication(context.Context, *CheckUserAuthenticationRequest) (*CheckUserAuthenticationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserAuthentication not implemented")
}
func (UnimplementedAuthenticateAndPostServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedAuthenticateAndPostServer) EditUser(context.Context, *EditUserRequest) (*EditUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditUser not implemented")
}
func (UnimplementedAuthenticateAndPostServer) GetUserDetailInfo(context.Context, *GetUserDetailInfoRequest) (*GetUserDetailInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserDetailInfo not implemented")
}
func (UnimplementedAuthenticateAndPostServer) GetUserFollower(context.Context, *GetUserFollowerRequest) (*GetUserFollowerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFollower not implemented")
}
func (UnimplementedAuthenticateAndPostServer) GetUserFollowing(context.Context, *GetUserFollowingRequest) (*GetUserFollowingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFollowing not implemented")
}
func (UnimplementedAuthenticateAndPostServer) FollowUser(context.Context, *FollowUserRequest) (*FollowUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowUser not implemented")
}
func (UnimplementedAuthenticateAndPostServer) UnfollowUser(context.Context, *UnfollowUserRequest) (*UnfollowUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnfollowUser not implemented")
}
func (UnimplementedAuthenticateAndPostServer) GetUserPosts(context.Context, *GetUserPostsRequest) (*GetUserPostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPosts not implemented")
}
func (UnimplementedAuthenticateAndPostServer) CreatePost(context.Context, *CreatePostRequest) (*CreatePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePost not implemented")
}
func (UnimplementedAuthenticateAndPostServer) GetPostDetailInfo(context.Context, *GetPostDetailInfoRequest) (*GetPostDetailInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostDetailInfo not implemented")
}
func (UnimplementedAuthenticateAndPostServer) EditPost(context.Context, *EditPostRequest) (*EditPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditPost not implemented")
}
func (UnimplementedAuthenticateAndPostServer) DeletePost(context.Context, *DeletePostRequest) (*DeletePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePost not implemented")
}
func (UnimplementedAuthenticateAndPostServer) CommentPost(context.Context, *CommentPostRequest) (*CommentPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommentPost not implemented")
}
func (UnimplementedAuthenticateAndPostServer) LikePost(context.Context, *LikePostRequest) (*LikePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikePost not implemented")
}
func (UnimplementedAuthenticateAndPostServer) GetS3PresignedUrl(context.Context, *GetS3PresignedUrlRequest) (*GetS3PresignedUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetS3PresignedUrl not implemented")
}
func (UnimplementedAuthenticateAndPostServer) mustEmbedUnimplementedAuthenticateAndPostServer() {}

// UnsafeAuthenticateAndPostServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthenticateAndPostServer will
// result in compilation errors.
type UnsafeAuthenticateAndPostServer interface {
	mustEmbedUnimplementedAuthenticateAndPostServer()
}

func RegisterAuthenticateAndPostServer(s grpc.ServiceRegistrar, srv AuthenticateAndPostServer) {
	s.RegisterService(&AuthenticateAndPost_ServiceDesc, srv)
}

func _AuthenticateAndPost_CheckUserAuthentication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserAuthenticationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticateAndPostServer).CheckUserAuthentication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthenticateAndPost_CheckUserAuthentication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticateAndPostServer).CheckUserAuthentication(ctx, req.(*CheckUserAuthenticationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticateAndPost_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticateAndPostServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthenticateAndPost_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticateAndPostServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticateAndPost_EditUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticateAndPostServer).EditUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthenticateAndPost_EditUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticateAndPostServer).EditUser(ctx, req.(*EditUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticateAndPost_GetUserDetailInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserDetailInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticateAndPostServer).GetUserDetailInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthenticateAndPost_GetUserDetailInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticateAndPostServer).GetUserDetailInfo(ctx, req.(*GetUserDetailInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticateAndPost_GetUserFollower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserFollowerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticateAndPostServer).GetUserFollower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthenticateAndPost_GetUserFollower_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticateAndPostServer).GetUserFollower(ctx, req.(*GetUserFollowerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticateAndPost_GetUserFollowing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserFollowingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticateAndPostServer).GetUserFollowing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthenticateAndPost_GetUserFollowing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticateAndPostServer).GetUserFollowing(ctx, req.(*GetUserFollowingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticateAndPost_FollowUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticateAndPostServer).FollowUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthenticateAndPost_FollowUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticateAndPostServer).FollowUser(ctx, req.(*FollowUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticateAndPost_UnfollowUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnfollowUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticateAndPostServer).UnfollowUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthenticateAndPost_UnfollowUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticateAndPostServer).UnfollowUser(ctx, req.(*UnfollowUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticateAndPost_GetUserPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticateAndPostServer).GetUserPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthenticateAndPost_GetUserPosts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticateAndPostServer).GetUserPosts(ctx, req.(*GetUserPostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticateAndPost_CreatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticateAndPostServer).CreatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthenticateAndPost_CreatePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticateAndPostServer).CreatePost(ctx, req.(*CreatePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticateAndPost_GetPostDetailInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostDetailInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticateAndPostServer).GetPostDetailInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthenticateAndPost_GetPostDetailInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticateAndPostServer).GetPostDetailInfo(ctx, req.(*GetPostDetailInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticateAndPost_EditPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticateAndPostServer).EditPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthenticateAndPost_EditPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticateAndPostServer).EditPost(ctx, req.(*EditPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticateAndPost_DeletePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticateAndPostServer).DeletePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthenticateAndPost_DeletePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticateAndPostServer).DeletePost(ctx, req.(*DeletePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticateAndPost_CommentPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticateAndPostServer).CommentPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthenticateAndPost_CommentPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticateAndPostServer).CommentPost(ctx, req.(*CommentPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticateAndPost_LikePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticateAndPostServer).LikePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthenticateAndPost_LikePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticateAndPostServer).LikePost(ctx, req.(*LikePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticateAndPost_GetS3PresignedUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetS3PresignedUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticateAndPostServer).GetS3PresignedUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthenticateAndPost_GetS3PresignedUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticateAndPostServer).GetS3PresignedUrl(ctx, req.(*GetS3PresignedUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthenticateAndPost_ServiceDesc is the grpc.ServiceDesc for AuthenticateAndPost service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthenticateAndPost_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "authen_and_post.AuthenticateAndPost",
	HandlerType: (*AuthenticateAndPostServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckUserAuthentication",
			Handler:    _AuthenticateAndPost_CheckUserAuthentication_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _AuthenticateAndPost_CreateUser_Handler,
		},
		{
			MethodName: "EditUser",
			Handler:    _AuthenticateAndPost_EditUser_Handler,
		},
		{
			MethodName: "GetUserDetailInfo",
			Handler:    _AuthenticateAndPost_GetUserDetailInfo_Handler,
		},
		{
			MethodName: "GetUserFollower",
			Handler:    _AuthenticateAndPost_GetUserFollower_Handler,
		},
		{
			MethodName: "GetUserFollowing",
			Handler:    _AuthenticateAndPost_GetUserFollowing_Handler,
		},
		{
			MethodName: "FollowUser",
			Handler:    _AuthenticateAndPost_FollowUser_Handler,
		},
		{
			MethodName: "UnfollowUser",
			Handler:    _AuthenticateAndPost_UnfollowUser_Handler,
		},
		{
			MethodName: "GetUserPosts",
			Handler:    _AuthenticateAndPost_GetUserPosts_Handler,
		},
		{
			MethodName: "CreatePost",
			Handler:    _AuthenticateAndPost_CreatePost_Handler,
		},
		{
			MethodName: "GetPostDetailInfo",
			Handler:    _AuthenticateAndPost_GetPostDetailInfo_Handler,
		},
		{
			MethodName: "EditPost",
			Handler:    _AuthenticateAndPost_EditPost_Handler,
		},
		{
			MethodName: "DeletePost",
			Handler:    _AuthenticateAndPost_DeletePost_Handler,
		},
		{
			MethodName: "CommentPost",
			Handler:    _AuthenticateAndPost_CommentPost_Handler,
		},
		{
			MethodName: "LikePost",
			Handler:    _AuthenticateAndPost_LikePost_Handler,
		},
		{
			MethodName: "GetS3PresignedUrl",
			Handler:    _AuthenticateAndPost_GetS3PresignedUrl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authen_and_post.proto",
}
